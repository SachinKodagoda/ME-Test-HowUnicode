doctype html
html(lang='en')
  head
    include ../globals/head.pug
  body
    .wrapper
      .topic
        | JavaScript (ES6 and Beyond) Cheat Sheet
      .topic_desc
        span.topic_link EcmaScript (ES)
        |  is the standardised scripting language for
        span.topic_link JavaScript (JS).
        |  The current ES version supported in modern browsers is ES5.
        | However, ES6 tackles a lot of the limitations of the core language, making it easier for developers to code.
      .row_flex
        .col_flex
          .card
            .code
              .code_body_cover
                .code_title The Ternary Operator
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | const&nbsp;x&nbsp;=&nbsp;20 ;
                  br
                  | let&nbsp;answer ;
                  br
                  | if&nbsp;( x&nbsp;>&nbsp;10 )&nbsp;{
                  br
                  | &nbsp; &nbsp; answer&nbsp;=&nbsp;'greater than 10' ;
                  br
                  | } else {
                  br
                  | &nbsp; &nbsp; answer&nbsp;=&nbsp;'less than 10' ;
                  br
                  | }
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | answer&nbsp;=&nbsp;x&nbsp;>&nbsp;10&nbsp;? 'greater than 10' : 'less than 10' ;
                  br
                  | /* If you want to pass x value then do like this */
                  br
                  | answer&nbsp;=&nbsp;x&nbsp;>&nbsp;10 ? 'greater than 10' : x ;
          .card
            .code
              .code_body_cover
                .code_title Short-circuit Evaluation
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | if ( v1&nbsp;!==&nbsp;null&nbsp;|| v1&nbsp;!==&nbsp;undefined&nbsp;|| v1&nbsp;!==&nbsp;'' ) {
                  br
                  | &nbsp; &nbsp; v2&nbsp;=&nbsp;v1 ;
                  br
                  | } else {
                  br
                  | &nbsp; &nbsp; v2&nbsp;=&nbsp;'new' ;
                  br
                  | }
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh
                  | let&nbsp;v2&nbsp;=&nbsp;v1&nbsp;||&nbsp;'new' ;
                .breaker
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | let dbHost;
                  br
                  | if&nbsp;( process.env.DB_HOST ) {
                  br
                  | &nbsp; &nbsp; dbHost&nbsp;=&nbsp;process.env.DB_HOST ;
                  br
                  | } else {
                  br
                  | &nbsp; &nbsp; dbHost&nbsp;=&nbsp;'localhost' ;
                  br
                  | }
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | const&nbsp;dbHost&nbsp;=&nbsp;process.env.DB_HOST || 'localhost' ;
          .card
            .code
              .code_body_cover
                .code_title Declaring Variables
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | let x ;
                  br
                  | let y ;
                  br
                  | let z&nbsp;=&nbsp;3 ;
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | let&nbsp;x,&nbsp;y,&nbsp;z&nbsp;=&nbsp;3 ;
          .card
            .code
              .code_body_cover
                .code_title If Presence
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | if&nbsp;( variable1&nbsp;===&nbsp;true ) { }
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh
                  | if&nbsp;( variable1 ) { }
                .breaker
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | if&nbsp;( variable2&nbsp;!==&nbsp;true ) { }
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | if&nbsp;( !variable2 ) { }
                .note
                  span.note_tag NOTE:
                  |  Above examples, Longhand methods and Shorthand methods are not exactly equal, as the shorthand methods will pass as long as variable1/variable2 are
                  a.highlight_word(href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy")  truthy
                  |  value.
          .card
            .code
              .code_body_cover
                .code_title JavaScript for Loop
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | for&nbsp;( let&nbsp;i&nbsp;=&nbsp;0&nbsp;; i&nbsp;<&nbsp;arr.length&nbsp;; i++ ) { }
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh
                  | for&nbsp;( let&nbsp;index&nbsp;of&nbsp;arr ) { }
                  br
                .breaker
                .code_body_subtitle Shorthand for Array.forEach
                .code_body.jsHigh.round_bottom_border
                  | function logArrayElements ( element, index, array ) {
                  br
                  | &nbsp;&nbsp;console.log( " a[ " + index + " ] = " + element) ;
                  br
                  | }
                  br
                  | [2, 5, 9].forEach ( logArrayElements ) ;
                  br
                  br
                  | // logs:
                  br
                  | // a[0] = 2
                  br
                  | // a[1] = 5
                  br
                  | // a[2] = 9
          .card
            .code
              .code_body_cover
                .code_title Decimal base exponents
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | for ( let&nbsp;i&nbsp;=&nbsp;0 ; i&nbsp;<&nbsp;10 ; i++ ) {
                  br
                  | &nbsp;&nbsp; console.log ( i ) ;
                  br
                  | }
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | for ( let&nbsp;i&nbsp;=&nbsp;0 ; i&nbsp;<&nbsp;1e1 ; i++ ) {
                  br
                  | &nbsp;&nbsp; console.log ( i ) ;
                  br
                  | }
                .note
                  | &nbsp;&nbsp;&nbsp;&nbsp;/* All the below will evaluate to true */
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e0 === 1 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e1 === 10 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e2 === 100 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e3 === 1000 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e4 === 10000 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e5 === 100000 ;
        .col_flex
          .card
            .code
              .code_body_cover
                .code_title Object Property
                .code_body_subtitle ES5
                .code_body.jsHigh
                  | var x = 5, y = 6 ;
                  br
                  | var obj&nbsp;=&nbsp;{ x : x, y : y } ;
                  br
                  | console.log ( obj.x ) ;
                .console // console: 5
                .code_body_subtitle ES6
                .code_body.jsHigh
                  | let x = 5, y = 6;
                  br
                  | const obj&nbsp;=&nbsp;{ x, y } ;
                  br
                  | console.log ( obj.x ) ;
                .console.round_bottom_border // console: 5
          .card
            .code
              .code_body_cover
                .code_title Arrow Functions
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | function sayHello (name) {
                  br
                  | &nbsp;&nbsp; console.log&nbsp;( 'Hello:', name ) ;
                  br
                  | }
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh
                  | sayHello = name&nbsp;=>&nbsp;console.log&nbsp;( 'Hello:', name ) ;
                .breaker
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | setTimeout ( function( ) {
                  br
                  | &nbsp;&nbsp; console.log&nbsp;( 'Loaded' )
                  br
                  | }, 2000) ;
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh
                  | setTimeout ( ( )&nbsp;=>&nbsp;console.log&nbsp;( 'Loaded' ), 2000 ) ;
                .breaker
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | list.forEach ( function ( item ) {
                  br
                  | &nbsp;&nbsp; console.log ( item ) ;
                  br
                  | }) ;
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | list.forEach ( item&nbsp;=>&nbsp;console.log&nbsp;(&nbsp;item&nbsp;) ) ;
                .note
                  span.note_tag Note:
                  |  The value of
                  span.highlight_word  "this"
                  |  inside an arrow function is determined differently, so the examples are not strictly equivalent.
          .card
            .code
              .code_body_cover
                .code_title Implicit Return
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | function&nbsp;calcCircumference&nbsp;(diameter) {
                  br
                  | &nbsp;&nbsp; return Math.PI * diameter ;
                  br
                  | }
                  br
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | calcCircumference =&nbsp;diameter&nbsp;=>&nbsp;(
                  br
                  | &nbsp;&nbsp; Math.PI * diameter ;
                  br
                  | )
          .card
            .code
              .code_body_cover
                .code_title Default Parameter Values
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | function volume ( l, w, h ) {
                  br
                  | &nbsp;&nbsp; if ( w === undefined )
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; w = 3 ;
                  br
                  | &nbsp;&nbsp; if ( h === undefined )
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; h = 4 ;
                  br
                  | &nbsp;&nbsp; return l * w * h ;
                  br
                  | }
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | volume = ( l, w&nbsp;=&nbsp;3, h&nbsp;=&nbsp;4 )&nbsp;=> (&nbsp;l&nbsp;*&nbsp;w&nbsp;*&nbsp;h&nbsp;) ;
          .card
            .code
              .code_body_cover
                .code_title Template Literals
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | const db = 'http://' + host + ':' + port + '/' + database ;
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | const db = `http://${host}:${port}/${database}` ;
          .card
            .code
              .code_body_cover
                .code_title Destructuring Assignment
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | const observable = require&nbsp;(&nbsp;'mobx/observable'&nbsp;)&nbsp;;
                  br
                  | const action = require&nbsp;(&nbsp;'mobx/action'&nbsp;)&nbsp;;
                  br
                  | const runInAction = require&nbsp;(&nbsp;'mobx/runInAction'&nbsp;)&nbsp;;
                .code_body_subtitle Shorthand
                .code_body.jsHigh
                  | import { observable, action, runInAction } from 'mobx' ;
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | const store = this.props.store ;
                  br
                  | const form = this.props.form ;
                  br
                  | const loading = this.props.loading ;
                  br
                  | const errors = this.props.errors ;
                  br
                  | const entity = this.props.entity ;
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | const { store, form, loading, errors, entity } = this.props ;
                  br
                  | /* You can even assign your own variable names: */
                  br
                  | const { store, form, loading, errors, entity:contact } = this.props ;
        .col_flex
          .card
            .code
              .code_body_cover
                .code_title Multi-line String
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | const lorem = 'Lorem ipsum \n\t'
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ 'adipisicing elit \n\t'
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | // backticks can be used
                  br
                  | const lorem = `Lorem ipsum
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adipisicing elit`
          .card
            .code
              .code_body_cover
                .code_title Spread Operator
                .code_body_subtitle Longhand of joining arrays
                .code_body.jsHigh
                  | const odd = [ 1, 3, 5 ] ;
                  br
                  | const nums = [ 2, 4, 6 ].concat ( odd ) ;
                .code_body_subtitle Shorthand of joining arrays
                .code_body.jsHigh
                  | const odd = [ 1, 3, 5 ] ;
                  br
                  | const nums = [ 2, ...odd, 4, 6 ] ;
                  br
                  | console.log ( nums ) ;
                  br
                  | // [ 2, 1, 3, 5, 4, 6]
                .breaker
                .code_body_subtitle Longhand of cloning arrays
                .code_body.jsHigh
                  | const arr = [ 1, 2, 3, 4 ] ;
                  br
                  | const arr2 = arr.slice ( ) ;
                .code_body_subtitle Shorthan of cloning arrays
                .code_body.jsHigh
                  | const arr = [ 1, 2, 3, 4 ] ;
                  br
                  | const arr2 = [ ...arr ] ;
                .breaker
                .code_body_subtitle With destructuring notation
                .code_body.jsHigh.round_bottom_border
                  | const { a, b, ...z } = { a: 1, b: 2, c: 3, d: 4 };
                  br
                  | console.log ( a ) // 1
                  br
                  | console.log ( b ) // 2
                  br
                  | console.log ( z ) // { c: 3, d: 4 }
          .card
            .code
              .code_body_cover
                .code_title Mandatory Parameter
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | function foo ( bar ) {
                  br
                  | &nbsp;&nbsp; if ( bar === undefined ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Error (&nbsp;'Missing&nbsp;parameter!'&nbsp;)&nbsp;;
                  br
                  | &nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp; return bar;
                  br
                  | }
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | const mandatory = ( ) => {
                  br
                  | &nbsp;&nbsp; throw new Error (&nbsp;'Missing&nbsp;parameter!'&nbsp;)&nbsp;;
                  br
                  | }
                  br
                  br
                  | const foo = ( bar = mandatory ( ) ) => {
                  br
                  | &nbsp;&nbsp; return bar;
                  br
                  | }
                .note
                  span.note_tag NOTE:
                  |  By default, JavaScript will set function parameters to undefined if they are not passed a value.
                  | Some other languages will throw a warning or error.
                  | To enforce parameter assignment,
                  | you can use an if statement to throw an error if undefined,
                  | or you can take advantage of the ‘Mandatory parameter shorthand’.
          .card
            .code
              .code_body_cover
                .code_title Destructuring Assignment
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | const pets = [
                  br
                  |   { type: 'Dog', name: 'Max' },
                  br
                  |   { type: 'Cat', name: 'Karl' },
                  br
                  |   { type: 'Dog', name: 'Tommy' },
                  br
                  | ]
                  br
                  br
                  | function findDog ( name ) {
                  br
                  | &nbsp;&nbsp; for ( let i = 0; i < pets.length ; ++i ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; if ( pets[i].type&nbsp;===&nbsp;'Dog' && pets[i].name&nbsp;===&nbsp;name&nbsp;) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; return pets[i] ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp; }
                  br
                  | }
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | const pet = pets.find ( pet => pet.type&nbsp;===&nbsp;'Dog' && pet.name&nbsp;===&nbsp;'Tommy' ) ;
                  br
                  | console.log ( pet ) ;
                  br
                  | // { type: 'Dog', name: 'Tommy' }
          .card
            .code
              .code_body_cover
                .code_title Destructuring Assignment
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | function validate(values) {
                  br
                  | &nbsp;&nbsp; if ( !values.first )
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; return false;
                  br
                  | &nbsp;&nbsp; if( !values.last )
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; return false;
                  br
                  | &nbsp;&nbsp; return true;
                  br
                  | }
                  br
                  | console.log ( validate ( { first : 'Bruce', last : 'Wayne' } ) ) ;
                  br
                  | // true
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | // object validation rules
                  br
                  | const schema = {
                  br
                  | &nbsp;&nbsp; first: {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; required : true
                  br
                  | &nbsp;&nbsp; },
                  br
                  | &nbsp;&nbsp; last: {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; required : true
                  br
                  | &nbsp;&nbsp; }
                  br
                  | }
                  br
                  | // universal validation function
                  br
                  | const validate = ( schema, values ) => {
                  br
                  | &nbsp;&nbsp; for ( field in schema ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; if ( schema[field].required ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( !values[field] ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp; return true;
                  br
                  | &nbsp;}
                  br
                  | console.log ( validate ( schema, { first : 'Bruce' } ) );
                  br
                  | console.log ( validate ( schema, { first : 'Bruce' , last : 'Wayne' } ) );
          .card
            .code
              .code_body_cover
                .code_title Double Bitwise NOT
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | Math.floor ( 4.9 )&nbsp;===&nbsp;4  //true
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | ~~4.9&nbsp;===&nbsp;4  //true
    script(src='./assets/js/app.js')
    script codeColor()