doctype html
html(lang='en')
  head
    include ../globals/head.pug
  body
    .wrapper
      .topic
        | JavaScript (ES6 and Beyond) Cheat Sheet
      .topic_desc
        span.topic_link EcmaScript (ES)
        |  is the standardised scripting language for
        span.topic_link JavaScript (JS).
        |  The current ES version supported in modern browsers is ES5.
        | However, EcmaScript 6th edition (ES6 or ES2015) tackles a lot of the limitations of the core language, making it easier for developers to code.
      .row_flex
        .col_flex
          .card
            .code
              .code_body_cover
                .code_title Declaring Variables
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | var x ;
                  br
                  | var y ;
                  br
                  | var z&nbsp;=&nbsp;3 ;
                  br
                .code_body_subtitle Shorthand ( ES5 )
                .code_body.jsHigh.round_bottom_border
                  | var&nbsp;x,&nbsp;y,&nbsp;z&nbsp;=&nbsp;3 ;
                .note
                  span.note_tag NOTE:
                  |  In ES6,
                  span.highlight_word  let
                  |  or
                  span.highlight_word  const
                  |  is used instead of
                  span.highlight_word  var
                  |  keyword.
                  span.highlight_word  const
                  |  is a signal that the variable wonâ€™t be reassigned.
                  span.highlight_word  let
                  |  is a signal that the variable may be reassigned.
          .card
            .code
              .code_body_cover
                .code_title The Ternary Operator
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | var&nbsp;x&nbsp;=&nbsp;20 ;
                  br
                  | var&nbsp;answer ;
                  br
                  | if&nbsp;( x&nbsp;>&nbsp;10 )&nbsp;{
                  br
                  | &nbsp; &nbsp; answer&nbsp;=&nbsp;'greater than 10' ;
                  br
                  | } else {
                  br
                  | &nbsp; &nbsp; answer&nbsp;=&nbsp;'less than 10' ;
                  br
                  | }
                  br
                  | console.log ( answer ) ;
                .code_body_subtitle Shorthand ( ES5 )
                .code_body.jsHigh
                  | var x = 20 ;
                  br
                  | var answer ;
                  br
                  | answer&nbsp;=&nbsp;x&nbsp;>&nbsp;10&nbsp;? 'greater than 10' : 'less than 10' ;
                  br
                  | console.log ( answer ) ;
                .console.round_bottom_border // console: greater than 10
                .note
                  span.note_tag NOTE:
                  br
                  | if x is greater than 10 then pass x value, else pass 10. for that you can use following example
                  br
                  |&nbsp;&nbsp; answer&nbsp;=&nbsp;x&nbsp;>&nbsp;10 ? x : 10 ;
          .card
            .code
              .code_body_cover
                .code_title Short-circuit Evaluation
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | var v1, v2;
                  br
                  | if ( v1&nbsp;===&nbsp;null&nbsp;|| v1&nbsp;===&nbsp;undefined&nbsp;|| v1&nbsp;===&nbsp;'' ) {
                  br
                  | &nbsp; &nbsp; v2&nbsp;=&nbsp;'no value' ;
                  br
                  | } else {
                  br
                  | &nbsp; &nbsp; v2&nbsp;=&nbsp;v1 ;
                  br
                  | }
                  br
                  | console.log ( v2 ) ;
                .code_body_subtitle Shorthand ( ES5 )
                .code_body.jsHigh
                  | var v1 ;
                  br
                  | var&nbsp;v2&nbsp;=&nbsp;v1&nbsp;||&nbsp;'no value' ;
                  br
                  | console.log ( v2 ) ;
                .console.round_bottom_border // console: no value

          .card
            .code
              .code_body_cover
                .code_title If Presence
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | var v1 = true ;
                  br
                  | if&nbsp;( v1 === true ) {
                  br
                  | &nbsp;&nbsp; console.log ( "Yes" ) ;
                  br
                  | } else {
                  br
                  | &nbsp;&nbsp; console.log ( "No" ) ;
                  br
                  | }
                .code_body_subtitle Shorthand ( ES5 )
                .code_body.jsHigh
                  | var v1 = true ;
                  br
                  | if&nbsp;( v1 ) {
                  br
                  | &nbsp;&nbsp; console.log ( "Yes" ) ;
                  br
                  | } else {
                  br
                  | &nbsp;&nbsp; console.log ( "No" ) ;
                  br
                  | }
                .console // console: Yes
                .breaker
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | var v2 = false ;
                  br
                  | if&nbsp;( v2&nbsp;!==&nbsp;true ) {
                  br
                  | &nbsp;&nbsp; console.log ( "Hi" ) ;
                  br
                .code_body_subtitle Shorthand ( ES5 )
                .code_body.jsHigh
                  | var v2 = false ;
                  br
                  | if&nbsp;( !v2 ) {
                  br
                  | &nbsp;&nbsp; console.log ( "Hi" ) ;
                  br
                  | }
                .console.round_bottom_border // console: Hi
                .note
                  span.note_tag NOTE:
                  |  above examples are correct only if v1 and v2
                  a.highlight_word(href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy")  truthy
                  |  values ( v1, v2 should be true or false only).

          .card
            .code
              .code_body_cover
                .code_title JavaScript for Loop
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | var&nbsp;arr&nbsp;=&nbsp;[ 1, 2, 3 ] ;
                  br
                  | for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0 ; i&nbsp;<&nbsp;arr.length ; i++) {
                  br
                  | &nbsp;&nbsp; console.log ( i ) ;
                  br
                  | }
                .code_body_subtitle Shorthand ( ES6 )
                .code_body.jsHigh
                  | const arr = [ 1, 2, 3 ] ;
                  br
                  | for&nbsp;( let&nbsp;index&nbsp;of&nbsp;arr ) {
                  br
                  | &nbsp;&nbsp; console.log ( index );
                  br
                  | }
                .console // console:
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;  1
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;  2
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;  3
                .breaker
                .code_body_subtitle Shorthand for Array.forEach  ( ES5 )
                .code_body.jsHigh
                  | function logArrayElements ( element, index, array ) {
                  br
                  | &nbsp;&nbsp; console.log( " a[ " + index + " ] = " + element) ;
                  br
                  | }
                  br
                  | [2, 5, 9].forEach ( logArrayElements ) ;
                .console.round_bottom_border // console:
                  br
                  | &nbsp;&nbsp; a[0] = 2
                  br
                  | &nbsp;&nbsp; a[1] = 5
                  br
                  | &nbsp;&nbsp; a[2] = 9
          .card
            .code
              .code_body_cover
                .code_title Decimal base exponents
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | for ( let&nbsp;i&nbsp;=&nbsp;0 ; i&nbsp;<&nbsp;10 ; i++ ) {
                  br
                  | &nbsp;&nbsp; console.log ( i ) ;
                  br
                  | }
                .code_body_subtitle Shorthand ( ES5 )
                .code_body.jsHigh
                  | for ( let&nbsp;i&nbsp;=&nbsp;0 ; i&nbsp;<&nbsp;1e1 ; i++ ) {
                  br
                  | &nbsp;&nbsp; console.log ( i ) ;
                  br
                  | }
                .console.round_bottom_border // console: numbers from 1 to 10
                .note
                  | &nbsp;&nbsp;&nbsp;&nbsp;/* All the below will evaluate to true */
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e0 === 1 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e1 === 10 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e2 === 100 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e3 === 1000 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e4 === 10000 ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e5 === 100000 ;
        .col_flex
          .card
            .code
              .code_body_cover
                .code_title Object Property
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | var x = 5, y = 6 ;
                  br
                  | var obj&nbsp;=&nbsp;{ x : x, y : y } ;
                  br
                  | console.log ( obj.x ) ;
                .code_body_subtitle Shorthand ( ES6 )
                .code_body.jsHigh
                  | let x = 5, y = 6;
                  br
                  | const obj&nbsp;=&nbsp;{ x, y } ;
                  br
                  | console.log ( obj.x ) ;
                .console.round_bottom_border // console: 5
          .card
            .code
              .code_body_cover
                .code_title Arrow Functions
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | function sayHello (name) {
                  br
                  | &nbsp;&nbsp; console.log&nbsp;( 'Hello:', name ) ;
                  br
                  | }
                  br
                .code_body_subtitle Shorthand ( ES6 )
                .code_body.jsHigh
                  | const sayHello = name&nbsp;=>&nbsp;console.log&nbsp;( 'Hello', name ) ;
                  br
                  | sayHello ( " Sachin " ) ;
                .console // console: Hello Sachin
                .breaker
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | setTimeout ( function( ) {
                  br
                  | &nbsp;&nbsp; console.log&nbsp;( 'Loaded' )
                  br
                .code_body_subtitle Shorthand ( ES6 )
                .code_body.jsHigh
                  | setTimeout ( ( )&nbsp;=>&nbsp;console.log&nbsp;( 'Loaded' ), 2000 ) ;
                .console // console: "Loaded" Message will show in logs after 2000ms
                .breaker
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | var arr = [ 1, 2, 3 ] ;
                  br
                  | list.forEach ( function ( item ) {
                  br
                  | &nbsp;&nbsp; console.log ( item ) ;
                  br
                  | }) ;
                .code_body_subtitle Shorthand ( ES6 )
                .code_body.jsHigh
                  | const arr = [ 1, 2, 3 ] ;
                  br
                  | arr.forEach ( item&nbsp;=>&nbsp;console.log&nbsp;(&nbsp;item&nbsp;) ) ;
                .console.round_bottom_border // console:
                  br
                  | &nbsp;&nbsp; 1
                  br
                  | &nbsp;&nbsp; 2
                  br
                  | &nbsp;&nbsp; 3
                .note
                  span.note_tag Note:
                  |  The value of
                  span.highlight_word  "this"
                  |  inside an arrow function is determined differently, so the examples are not strictly equivalent.
          .card
            .code
              .code_body_cover
                .code_title Implicit Return
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | function&nbsp;calcCircumference&nbsp;(diameter) {
                  br
                  | &nbsp;&nbsp; return Math.PI * diameter ;
                  br
                  | }
                  br
                  | console.log ( calcCircumference ( 7 ) ) ;
                .code_body_subtitle Shorthand ( ES6 )
                .code_body.jsHigh
                  | let calcCircumference =&nbsp;diameter&nbsp;=>&nbsp;(
                  br
                  | &nbsp;&nbsp; Math.PI * diameter
                  br
                  | );
                  br
                  | console.log ( calcCircumference ( 7 ) ) ;
                .console.round_bottom_border // console: 21.991148575128552

          .card
            .code
              .code_body_cover
                .code_title Default Parameter Values
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | function volume ( l, w, h ) {
                  br
                  | &nbsp;&nbsp; if ( w === undefined )
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; w = 3 ;
                  br
                  | &nbsp;&nbsp; if ( h === undefined )
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; h = 4 ;
                  br
                  | &nbsp;&nbsp; return l * w * h ;
                  br
                  | }
                  br
                  | console.log ( volume ( 2 ) ) ;
                .code_body_subtitle Shorthand ( ES6 )
                .code_body.jsHigh
                  | volume = ( l, w&nbsp;=&nbsp;3, h&nbsp;=&nbsp;4 )&nbsp;=> (&nbsp;l&nbsp;*&nbsp;w&nbsp;*&nbsp;h&nbsp;) ;
                  br
                  | console.log ( volume ( 2 ) ) ;
                .console.round_bottom_border // console: 24
          .card
            .code
              .code_body_cover
                .code_title Template Literals
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | const host = "localhost", port = "8080", database = "mydb" ;
                  br
                  | const db = 'http://' + host + ':' + port + '/' + database ;
                .code_body_subtitle Shorthand ( ES6 )
                .code_body.jsHigh
                  | const host = "localhost", port = "8080", database = "mydb" ;
                  br
                  | const&nbsp;db&nbsp;= `http:// ${host} : ${port} / ${database} `;
                  br
                  | console.log ( db ) ;
                .console.round_bottom_border // console: http://localhost:8080/mydb
          .card
            .code
              .code_body_cover
                .code_title Destructuring Assignment
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | const observable = require&nbsp;(&nbsp;'mobx/observable'&nbsp;)&nbsp;;
                  br
                  | const action = require&nbsp;(&nbsp;'mobx/action'&nbsp;)&nbsp;;
                  br
                  | const runInAction = require&nbsp;(&nbsp;'mobx/runInAction'&nbsp;)&nbsp;;
                .code_body_subtitle Shorthand
                .code_body.jsHigh
                  | import { observable, action, runInAction } from 'mobx' ;
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | const store = this.props.store ;
                  br
                  | const form = this.props.form ;
                  br
                  | const loading = this.props.loading ;
                  br
                  | const errors = this.props.errors ;
                  br
                  | const entity = this.props.entity ;
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | const { store, form, loading, errors, entity } = this.props ;
                  br
                  | /* You can even assign your own variable names: */
                  br
                  | const { store, form, loading, errors, entity:contact } = this.props ;
        .col_flex
          .card
            .code
              .code_body_cover
                .code_title Multi-line String
                .code_body_subtitle Longhand ( ES5 )
                .code_body.jsHigh
                  | var lorem = "Lorem ipsum\n\t\tadipisicing elit";
                .code_body_subtitle Shorthand ( ES6 )
                .code_body.jsHigh.round_bottom_border
                  | // backticks can be used
                  br
                  | const lorem = `Lorem ipsum
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adipisicing elit`
          .card
            .code
              .code_body_cover
                .code_title Spread Operator
                .code_body_subtitle Longhand of joining arrays ( ES5 )
                .code_body.jsHigh
                  | var odd = [ 1, 3, 5 ] ;
                  br
                  | var nums = [2].concat(odd, [4, 6]);
                .code_body_subtitle Shorthand of joining arrays ( ES6 )
                .code_body.jsHigh
                  | const odd = [ 1, 3, 5 ] ;
                  br
                  | const nums = [ 2, ...odd, 4, 6 ] ;
                  br
                  | console.log ( nums ) ;
                .console // console [ 2, 1, 3, 5, 4, 6]
                .breaker
                .code_body_subtitle Longhand of cloning arrays  ( ES5 )
                .code_body.jsHigh
                  | var arr = [ 1, 2, 3, 4 ] ;
                  br
                  | var arr2 = arr.slice ( ) ;
                .code_body_subtitle Shorthan of cloning arrays ( ES6 )
                .code_body.jsHigh
                  | const arr = [ 1, 2, 3, 4 ] ;
                  br
                  | const arr2 = [ ...arr ] ;
                  br
                  | console.log ( arr2 ) ;
                .console // console [ 1, 2, 3, 4 ]
                .breaker
                .code_body_subtitle With destructuring notation
                .code_body.jsHigh
                  | const { a, b, ...z } = { a: 1, b: 2, c: 3, d: 4 };
                  br
                  | console.log ( a ) // 1
                  br
                  | console.log ( b ) // 2
                  br
                  | console.log ( z ) // { c: 3, d: 4 }
                .console.round_bottom_border // check this again some issue is there
          .card
            .code
              .code_body_cover
                .code_title Mandatory Parameter
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | function foo ( bar ) {
                  br
                  | &nbsp;&nbsp; if ( bar === undefined ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Error (&nbsp;'Missing&nbsp;parameter!'&nbsp;)&nbsp;;
                  br
                  | &nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp; return bar;
                  br
                  | }
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | const mandatory = ( ) => {
                  br
                  | &nbsp;&nbsp; throw new Error (&nbsp;'Missing&nbsp;parameter!'&nbsp;)&nbsp;;
                  br
                  | }
                  br
                  br
                  | const foo = ( bar = mandatory ( ) ) => {
                  br
                  | &nbsp;&nbsp; return bar;
                  br
                  | }
                .note
                  span.note_tag NOTE:
                  |  By default, JavaScript will set function parameters to undefined if they are not passed a value.
                  | Some other languages will throw a warning or error.
                  | To enforce parameter assignment,
                  | you can use an if statement to throw an error if undefined,
                  | or you can take advantage of the â€˜Mandatory parameter shorthandâ€™.
          .card
            .code
              .code_body_cover
                .code_title Destructuring Assignment
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | const pets = [
                  br
                  |   { type: 'Dog', name: 'Max' },
                  br
                  |   { type: 'Cat', name: 'Karl' },
                  br
                  |   { type: 'Dog', name: 'Tommy' },
                  br
                  | ]
                  br
                  br
                  | function findDog ( name ) {
                  br
                  | &nbsp;&nbsp; for ( let i = 0; i < pets.length ; ++i ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; if ( pets[i].type&nbsp;===&nbsp;'Dog' && pets[i].name&nbsp;===&nbsp;name&nbsp;) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; return pets[i] ;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp; }
                  br
                  | }
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | const pet = pets.find ( pet => pet.type&nbsp;===&nbsp;'Dog' && pet.name&nbsp;===&nbsp;'Tommy' ) ;
                  br
                  | console.log ( pet ) ;
                  br
                  | // { type: 'Dog', name: 'Tommy' }
          .card
            .code
              .code_body_cover
                .code_title Destructuring Assignment
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | function validate(values) {
                  br
                  | &nbsp;&nbsp; if ( !values.first )
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; return false;
                  br
                  | &nbsp;&nbsp; if( !values.last )
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; return false;
                  br
                  | &nbsp;&nbsp; return true;
                  br
                  | }
                  br
                  | console.log ( validate ( { first : 'Bruce', last : 'Wayne' } ) ) ;
                  br
                  | // true
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | // object validation rules
                  br
                  | const schema = {
                  br
                  | &nbsp;&nbsp; first: {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; required : true
                  br
                  | &nbsp;&nbsp; },
                  br
                  | &nbsp;&nbsp; last: {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; required : true
                  br
                  | &nbsp;&nbsp; }
                  br
                  | }
                  br
                  | // universal validation function
                  br
                  | const validate = ( schema, values ) => {
                  br
                  | &nbsp;&nbsp; for ( field in schema ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; if ( schema[field].required ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( !values[field] ) {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp;&nbsp; }
                  br
                  | &nbsp;&nbsp; return true;
                  br
                  | &nbsp;}
                  br
                  | console.log ( validate ( schema, { first : 'Bruce' } ) );
                  br
                  | console.log ( validate ( schema, { first : 'Bruce' , last : 'Wayne' } ) );
          .card
            .code
              .code_body_cover
                .code_title Double Bitwise NOT
                .code_body_subtitle Longhand
                .code_body.jsHigh
                  | Math.floor ( 4.9 )&nbsp;===&nbsp;4  //true
                .code_body_subtitle Shorthand
                .code_body.jsHigh.round_bottom_border
                  | ~~4.9&nbsp;===&nbsp;4  //true
    script(src='./assets/js/app.js')
    script codeColor()